---
title: "Spatial Data"
format: html
editor: visual
---

## Load libraries
```{r}
#| message: false

library(readr)
library(sf)
library(ggplot2)
library(leaflet)
library(scales)
library(ggspatial)
library(dplyr)
```

## Load shapefile from [KNB repository](https://dev.nceas.ucsb.edu/view/urn:uuid:6f07cb25-a4a1-48e8-95cb-74f532f3ce2d)
```{r}
# download URL
knb_url <- "https://dev.nceas.ucsb.edu/knb/d1/mn/v2/object/urn%3Auuid%3Aaceaecb2-1ce0-4d41-a839-d3607d32bb58"

# downloading zip file
download.file(url = knb_url, destfile = 'shapefile_demo_data.zip')

# unzipping
unzip('shapefile_demo_data.zip', exdir = 'data')

# removing zip file
file.remove('shapefile_demo_data.zip')
```

## Exploring the data using plot() and st_crs()
```{r}
# read in shapefile using read_sf()
ak_regions <- read_sf("data/ak_regions_simp.shp")
```

```{r}
# quick plot
plot(ak_regions)
```

```{r}
class(ak_regions)

head(ak_regions)

glimpse(ak_regions)

```

Look up current CRS with st_crs()
```{r}
st_crs(ak_regions)
# it is WGS 84
```

Changing CRS with st_transform() - changing to Alaska Albers projection, with an EPSG code of 3338.
```{r}
ak_regions_3338 <- ak_regions %>%
    st_transform(crs = 3338)

st_crs(ak_regions_3338)

plot(ak_regions_3338)
```

## sf & the Tidyverse
```{r}
# returns the names of all the columns in dataset
colnames(ak_regions_3338)

# can see how when selecting columns, the geometry is sticky and stays with the dataset
ak_regions_3338 %>%
    select(region)
```

```{r}
unique(ak_regions_3338$region)

ak_regions_3338 %>%
    filter(region == "Southeast")
```

## Exercise: How many people live in each of these Alaska regions?
Read in alaska population data
```{r}
#| message: false

# read in population data
pop <- read_csv("data/alaska_population.csv")
```

Turn population data into a spatial object
```{r}
pop_4326 <- st_as_sf(pop,
                     coords = c('lng', 'lat'),
                     crs = 4326,
                     remove = F)

head(pop_4326)
```

Transform to EPSG 3338
```{r}
pop_3338 <- st_transform(pop_4326, 
                         crs = 3338)
```

Left join with ak_regions_3338 using st_join() - for more info on different types of joins: ?st_within()
```{r}
pop_joined <- st_join(pop_3338, 
                      ak_regions_3338, 
                      join = st_within)

head(pop_joined)
```

Calculate total population using group_by() and summarize()
```{r}
pop_region <- pop_joined %>%
  as.data.frame() %>%  # will remove geometry, change from sf to dataframe
  group_by(region) %>%
  summarise(total_pop = sum(population))

head(pop_region)
```

Add total population info back to the shapefile
```{r}
pop_region_3338 <- left_join(ak_regions_3338, 
                             pop_region, 
                             by = "region")

# check
head(pop_region_3338)
plot(pop_region_3338["total_pop"])
```
*sf & Tidyverse note:*

The group_by() and summarize() functions can also be used on sf objects to summarize within a dataset and combine geometries. Many of the tidyverse functions have methods specific for sf objects, some of which have additional arguments that wouldnâ€™t be relevant to the data.frame methods. You can run ?sf::tidyverse to get documentation on the tidyverse sf methods.

Calculate the population by Alaska management area
```{r}
pop_mgmt_3338 <- pop_region_3338 %>%
    group_by(mgmt_area) %>%
    summarize(total_pop = sum(total_pop))

plot(pop_mgmt_3338["total_pop"])
```
Notice that the region geometries were combined into a single polygon for each management area.
If we don't want them to combine, set do_union = F
```{r}
pop_mgmt_3338 <- pop_region_3338 %>%
    group_by(mgmt_area) %>%
    summarize(total_pop = sum(total_pop), do_union = F)

plot(pop_mgmt_3338["total_pop"])
```

Saving spatial object with write_sf()
```{r}
write_sf(pop_region_3338, "data/ak_regions_population.shp")
```

## Visualize with ggplot2
```{r}
# total population map, with gradient colors
ggplot(pop_region_3338) +
    geom_sf(aes(fill = total_pop)) +
    labs(fill = "Total Population") +
    scale_fill_continuous(low = "khaki",
                          high =  "firebrick",
                          labels = comma) +
    theme_bw()
```
Adding in river data
```{r}
rivers_3338 <- read_sf("data/ak_rivers_simp.shp")
st_crs(rivers_3338)
```

```{r}
ggplot() +
    geom_sf(data = pop_region_3338, aes(fill = total_pop)) +
    geom_sf(data = rivers_3338, aes(linewidth = StrOrder)) +
    scale_linewidth(range = c(0.05, 0.5),  guide = "none") +
    labs(title = "Total Population by Alaska Region", fill = "Total Population") +
    scale_fill_continuous(low = "khaki",
                          high =  "firebrick",
                          labels = comma) +
    theme_bw() 

```
## Incorporate basemaps with ggspatial
```{r}
ggplot(data = pop_3338) +
    ggspatial::annotation_map_tile(type = "osm", zoom = 4) + # higher zoom values are more detailed 
    geom_sf(aes(color = population),
            fill = NA) +
    scale_color_continuous(low = "darkkhaki",
                           high =  "firebrick",
                           labels = comma)
```
## Visualize sf objects with leaflet

Define a leaflet projection for Alaska Albers
```{r}
epsg3338 <- leaflet::leafletCRS(
    crsClass = "L.Proj.CRS",
    code = "EPSG:3338",
    proj4def =  "+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
    resolutions = 2 ^ (16:7)
)
```

Leaflet requires an unprojected coordinate system, so use st_transform() to get back to WGS84
```{r}
pop_region_4326 <- pop_region_3338 %>% 
    st_transform(crs = 4326)
```

Plotting
```{r}
m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(data = pop_region_4326,
                fillColor = "gray",
                weight = 1)

m
```

Adding more details
```{r}
# creating color palette based on total population
pal <- colorNumeric(palette = "Reds", domain = pop_region_4326$total_pop)

m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(
        data = pop_region_4326,
        fillColor = ~ pal(total_pop),
        weight = 1,
        color = "black",
        fillOpacity = 1,
        label = ~ region
    ) %>%
    addLegend(
        position = "bottomleft",
        pal = pal,
        values = range(pop_region_4326$total_pop),
        title = "Total Population"
    )

m
```

Adding communities with pop-ups
```{r}
# creating color palette based on total population
pal <- colorNumeric(palette = "Reds", domain = pop_region_4326$total_pop)

m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(
        data = pop_region_4326,
        fillColor = ~ pal(total_pop),
        weight = 1,
        color = "black",
        fillOpacity = 1
    ) %>%
    addCircleMarkers( # adding markers for cities
        data = pop_4326,
        lat = ~ lat,
        lng = ~ lng,
        radius = ~ log(population / 500), # arbitrary scaling
        fillColor = "gray",
        fillOpacity = 1,
        weight = 0.25,
        color = "black",
        label = ~ paste0(pop_4326$city, ", population ", comma(pop_4326$population))
    ) %>%
    addLegend(
        position = "bottomleft",
        pal = pal,
        values = range(pop_region_4326$total_pop),
        title = "Total Population"
    )

m
```

